<?php

function ebe_menu() {
  $items['admin/reports/ebe'] = array(
      'page callback' => 'ebe_menu_page',
      'access arguments' => array("access site reports"),
      'title' => t('Entity Diagrams'),
      'type' => MENU_NORMAL_ITEM
  );
  
  $items['admin/reports/ebe/display'] = array(
      'page callback' => 'ebe_menu_page',
      'access arguments' => array("access site reports"),
      'title' => t('Entity Diagrams'),
      'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  $items['admin/reports/ebe/springy'] = array(
  		'page callback' => 'ebe_menu_page',
  		'page arguments' => array('springy'),
  		'access arguments' => array("access site reports"),
  		'title' => t('Entity Diagrams Springy'),
  		'type' => MENU_LOCAL_TASK
  );

  $items['admin/reports/ebe/config'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ebe_config'),
      'access arguments' => array("access site reports"),
      'title' => t('Settings'),
      'type' => MENU_LOCAL_TASK
  );
  return $items ;
}

function ebe_config(){
  $form = array();
  $info = entity_get_info();
  $config = _ebe_get_config();
  $form['#tree'] = true ;
  $form['config']['show_entity'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show entity type'),
      '#return_value' => 1,
      '#default_value' => ($config['show_entity']) ? 1 : 0,
      '#description' => t('Show all entity types')
  );
  $form['config']['disable_entity'] = array(
      '#type' => 'fieldset',
      '#title' => t('Disable entities'),
  );
  foreach ( $info as $entity_type => $entity_type_info ) {
    $form['config']['disable_entity'][$entity_type] = array(
        '#tree' => true ,
        '#type' => 'checkbox',
        '#title' => $entity_type_info['label'],
        '#default_value' => ($config['disable_entity'][$entity_type]) ? $config['disable_entity'][$entity_type] : 0,
        '#return_value' => 1
    );
  }
  $form['config']['paper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Paper settings')
  );
  $form['config']['paper']['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Paper settings'),
      '#default_value' => ($config['paper']['width'])
  );
  $form['config']['paper']['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Paper settings'),
      '#default_value' => ($config['paper']['height'])
  );
  $form['submit'] = array(
      '#value' => t('Save settings'),
      '#type'  => 'submit'
  );
  return $form ;
}

function ebe_config_submit($form,$form_state) {
  variable_set('ebe_config',$form_state['values']['config']);
}

function ebe_menu_page($view = 'jointjs') {
  $config = _ebe_get_config();
  entity_info_cache_clear();
  
  $infos = entity_get_info();
  $simpleInfo = array();
  foreach ( $infos as $type => $info ) {
    if (  ( (isset($config['show_entity']) && $config['show_entity'] == '1') && $config['disable_entity'][$type] != '1') ) {
      if ( isset($info['graph info']) ) $simpleInfo[] = $info['graph info'] ;
    }
    if ( !isset($config['disable_entity'][$type]) || $config['disable_entity'][$type] == '0' ) {
      foreach ( $info['bundles'] as $t => $i ) {
        if ( isset($i['graph info']) ) $simpleInfo[] = $i['graph info'] ;
      }
    }
  }
  drupal_add_js(array('ebe_erd' => array('config' => $config, 'items' => $simpleInfo )) , 'setting' ) ;
  if ( $view == 'jointjs') {
  	$library = libraries_detect('jointjs');
  	libraries_load_files($library) ;
  	drupal_add_js(drupal_get_path( 'module', 'ebe').'/js/drawer-erd.js');
  	return "<div id='drawer' width='".$config['paper']['width']."' height='".$config['paper']['height']."'></div>" ;
  } elseif ( $view == 'springy' ) {
  	$library = libraries_detect('springy');
  	libraries_load_files($library) ;
  	drupal_add_js(drupal_get_path( 'module', 'ebe').'/js/drawer-forced-layout.js');
  	return "<canvas id='drawer' width='".$config['paper']['width']."' height='".$config['paper']['height']."'></canvas>" ;
  } 
}

function _ebe_get_config() {
  $defaults = array(
      'show_entity' => false,
      'paper' => array(
          'width' => 1200,
          'height' => 3000,
      		'columns' => 4
      )
  );
  $config = variable_get('ebe_config',array());
  return drupal_array_merge_deep($defaults,$config) ;
}

function ebe_libraries_info() {
  $libraries['jointjs'] = array(
    'name' => 'JointJS',
    'vendor url' => 'http://jointjs.com/',
    'download url' => 'https://github.com/DavidDurman/joint',
    'path' => 'dist',
    'version arguments' => array(
      'file' => 'dist/joint.all.js', 
      'pattern' => '@JointJS\s+v([0-9a-zA-Z\.-]+)@', 
      'lines' => 5,
    ),
    'files' => array(
      'js' => array('joint.all.js'), 
      'css' => array('joint.all.css')
    ),
  );
  $libraries['springy'] = array(
  		'name' => 'Springy',
  		'vendor url' => 'http://getspringy.com/',
  		'download url' => 'https://github.com/dhotson/springy',
  		'version arguments' => array(
  				'file' => 'springy.js',
  				'pattern' => '@Springy\s+v([0-9a-zA-Z\.-]+)@',
  				'lines' => 5,
  		),
  		'files' => array(
  				'js' => array('springy.js','springyui.js')
  		),
  );
  return $libraries;
}

function _ebe_is_allowed_entity($entity_type) {
  return in_array( $entity_type, array('node','taxonomy_term','paragraphs_item')) ;
}

function ebe_requirements($phase) {
  switch ( $phase ) {
    case 'runtime':
      $library = libraries_detect("jointjs");
      if ( isset($library['error message']) ) {
        $messages['jointjs'] = array(
            'title' => t('JointJS Library'),
            'value' => $library['error message'],
            'description' => t('Download JointJS Version <a target="_blank" href="@here">here</a>',array('@here' => $library['download url'])),
            'severity' => REQUIREMENT_INFO
          );
      } else {
        $messages['jointjs'] = array(
            'title' => t('JointJS Library'),
            'value' => $library['version'],
            'severity' => REQUIREMENT_OK
        );
      }
      
      $library = libraries_detect("springy");
      if ( isset($library['error message']) ) {
      	$messages['springy'] = array(
      			'title' => t('Springy Library'),
      			'value' => $library['error message'],
      			'description' => t('Download Springy Version <a target="_blank" href="@here">here</a>',array('@here' => $library['download url'])),
      			'severity' => REQUIREMENT_INFO
      	);
      } else {
      	$messages['springy'] = array(
      			'title' => t('Springy Library'),
      			'value' => $library['version'],
      			'severity' => REQUIREMENT_OK
      	);
      }
      
      return $messages ;
    break ;
  }
}

function ebe_entity_info_alter(&$entity_info) {
  foreach ( $entity_info as $entity => $info ) {
    $entity_info[$entity]['graph info'] = array(
      'type' => 'entity',
      'label' => $info['label'],
      'id' =>   $entity
    );
    $props = entity_get_property_info($entity);
    if ( $props && is_array($props) && isset($props['properties']) ) {
      foreach (  $props['properties'] as $prop => $propInfo ) {
        if ( !isset($propInfo['type']) ) $propInfo['type'] = 'string';
        $entity_info[$entity]['graph info']['attributes'][] = $propInfo['label'] . ':' . $propInfo['type'] ; 
      }
    }
    if ( $info['bundles'] ) {
      foreach ( $info['bundles'] as $bundle => $bundleInfo ) {
        $entity_info[$entity]['bundles'][$bundle]['graph info'] = array(
            'type' => 'bundle',
            'label' => $bundleInfo['label'] ,
            'id' => $entity . '__' . $bundle
        );
        $entity_info[$entity]['bundles'][$bundle]['graph info']['links_to'][] = array(
          'link' => $entity_info[$entity]['graph info']['id'] ,
          'type' => 'implements',
          'label' => t('Implements')
        );
        if ( $entity == 'comment' ) {
          $entity_info[$entity]['bundles'][$bundle]['graph info']['links_to'][] = array(
            'link' =>  'node__' . $bundleInfo['node bundle'],
            'type' => 'reference',
            'label' => t('Reference')
          );
        } elseif ( $bundle == 'taxonomy_term' ) {
          $entity_info[$entity]['bundles'][$bundle]['graph info']['links_to'][] = array(
            'link' =>  'taxonomy_vocabulary__taxonomy_vocabulary',
            'type' => 'implements',
            'label' => t('Implements')
          );
        } elseif ( $entity == 'taxonomy_vocabulary' ) {
          $entity_info[$entity]['bundles'][$bundle]['graph info']['links_to'][] = array(
            'link' =>  'taxonomy_vocabulary',
            'type' => 'implements',
            'label' => t('Implements')
          );
        }
        $data = $entity_info[$entity]['bundles'][$bundle]['graph info'];
        $context = array('entity_type' => $entity , 'bundle' => $bundle,'info' => $entity_info[$entity]['bundles'][$bundle]);
        drupal_alter('graph_info', $data, $context );
        $entity_info[$entity]['bundles'][$bundle]['graph info'] = $data ;
      } 
    }
  }
}

function ebe_graph_info_alter(&$graph_info,$context) {
  $field_info =    field_info_instances($context['entity_type'], $context['bundle']) ;
  $graph_info['attributes'] = array();
  foreach ( $field_info as $field_name => $info ) {
    $field_single_info = field_info_field($field_name) ;
    if ( $field_single_info['type'] == 'entityreference' ) {
      foreach ( $field_single_info['settings']['handler_settings']['target_bundles'] as $bundle => $label ) {
       $graph_info['links_to'][] = array(
          'link' => $field_single_info['settings']['target_type'] . '__' . $bundle ,
          'type' => 'reference',
          'label' => $field_name . ':' . $info['label'],
          'options' => array('required' => $info['required'],'cardinality' => $field_single_info['cardinality'])
        );
      }
    } elseif ( $field_single_info['type'] == 'paragraphs' ) {
      foreach ( $info['settings']['allowed_bundles'] as $key => $bundle_info ) {
        if ( $bundle_info != $key ) continue ;
        $graph_info['links_to'][] = array(
            'link' => 'paragraphs_item__' . $key ,
            'type' => 'reference',
            'label' => $field_name . ':' . $info['label'],
            'options' => array('required' => $info['required'],'cardinality' => $field_single_info['cardinality'])
        );
      }
    } elseif ( $field_single_info['type'] == 'taxonomy_term_reference' ) {
      foreach ( $field_single_info['settings']['allowed_values'] as $key => $voc_info ) {
        $graph_info['links_to'][] = array(
          'link' => 'taxonomy_term__' . $voc_info['vocabulary'] ,
          'type' => 'reference',
          'label' => $field_name . ':' . $info['label'],
          'options' => array('required' => $info['required'],'cardinality' => $field_single_info['cardinality'])
        );
      }
    }
    $graph_info['attributes'][] = array(
      $info['label'] . ':' . $field_name 
    );
  }
  return $graph_info;
}